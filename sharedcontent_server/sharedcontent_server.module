<?php

/**
 * @file
 * Hooks for the shared content server module.
 */
use Drupal\Core\Entity\EntityInterface;
use Drupal\sharedcontent\AssignmentInterface;
use Drupal\sharedcontent\Entity\Index;

/**
 * Implements hook_menu().
 *
 * @see sharedcontent_server_configure_keyword_vocabularies()
 * @see sharedcontent_server_configure_variables()
 */
function sharedcontent_server_menu() {
  $items = array();

  $items['admin/config/services/sharedcontent/settings/keywords'] = array(
    'title' => 'Keyword vocabularies',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Configure the taxonomy vocabularies to be taken into account when building the keywords while indexing a local content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharedcontent_server_configure_keyword_vocabularies'),
    'access arguments' => array('administer sharedcontent'),
    'file' => 'includes/sharedcontent_server.admin.inc',
  );

  $items['admin/config/services/sharedcontent/settings/server'] = array(
    'title' => 'Server',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Various server settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharedcontent_server_configure_variables'),
    'access arguments' => array('administer sharedcontent'),
    'file' => 'includes/sharedcontent_server.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_custom_theme().
 *
 * @see sharedcontent_is_overlay_request()
 */
function sharedcontent_server_custom_theme() {
  // Allow the user to request a particular theme via a query parameter.
  if (sharedcontent_is_overlay_request()) {
    return variable_get('sharedcontent_overlay_theme', 'seven');
  }
}

/**
 * Implements hook_init().
 *
 * $todo IMPORTANT: Do the actual changing on the client side for caching reasons.
 * @todo explain why we switch links.
 * @todo Probably we want to open external links in a new tab/window.
 *
 * @see sharedcontent_is_overlay_request()
 */
function sharedcontent_server_init() {
  if (sharedcontent_is_overlay_request()) {
    drupal_add_js(drupal_get_path('module', 'sharedcontent_server') . '/sharedcontent_server.js');
  }
}

/**
 * Implements hook_contextual_links_view_alter()
 *
 * Hide the contextual links in overlay mode.
 */
function sharedcontent_server_contextual_links_view_alter(&$element, &$items) {
  if (sharedcontent_is_overlay_request()) {
    // we expect to be in an none cache situation.
    $element['#links'] = array();
  }
}

/**
 * Implements hook_node_view_alter().
 *
 * Remove comments and links in on overlay display.
 */
function sharedcontent_server_node_view_alter(&$build) {
  if (sharedcontent_is_overlay_request()) {
    if (variable_get('sharedcontent_overlay_no_comments', TRUE)) {
      unset($build['comments']);
    }
    if (variable_get('sharedcontent_overlay_no_links', TRUE)) {
      unset($build['links']);
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter()
 *
 * Remove the local task in overlay mode.
 */
function sharedcontent_server_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (sharedcontent_is_overlay_request()) {
    $data['tabs'] = array('count' => 0, 'output' => array());
    $data['actions'] = array('count' => 0, 'output' => array());
  }
}

/**
 * Implements hook_page_alter().
 *
 * Remove toolbar on overlay display.
 *
 * @see sharedcontent_is_overlay_request()
 */
function sharedcontent_server_page_alter(&$page) {
  if (sharedcontent_is_overlay_request() && variable_get('sharedcontent_overlay_no_toolbar', TRUE)) {
    unset($page['page_top']['toolbar']);
    if (module_exists('admin_menu')) {
      admin_menu_suppress();
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add sharedcontent view modes to every entity.
 *
 * * sharedcontent_teaser
 * * sharedcontent_inline
 */
function sharedcontent_server_entity_info_alter(&$entity_info) {
  foreach ($entity_info as $key => $info) {
    $entity_info[$key]['view modes']['sharedcontent_teaser'] = array(
      'label' => t('Shared Teaser'),
      'custom settings' => TRUE,
    );
    $entity_info[$key]['view modes']['sharedcontent_inline'] = array(
      'label' => t('Shared Display'),
      'custom settings' => FALSE,
    );
  }
}

/**
 * Implements hook_services_resources().
 *
 * Define a resource to expose rendered content for displaying on sc clients.
 *
 * @see sharedcontent_server_render_content()
 */
function sharedcontent_server_services_resources() {
  // Arguments used in all list resources and list count actions.
  $list_resource_args = array(
    'changed' => array(
      'name' => 'changed',
      'optional' => TRUE,
      'source' => array('param' => 'changed'),
      'type' => 'string',
      'description' => 'The time of the oldest record to return.',
      'default value' => NULL,
    ),
    array(
      'name' => 'offset',
      'optional' => TRUE,
      'source' => array('param' => 'offset'),
      'description' => 'Offset value of the first record to return',
      'type' => 'int',
      'default value' => 0,
    ),
    array(
      'name' => 'limit',
      'optional' => TRUE,
      'source' => array('param' => 'limit'),
      'description' => 'Count of records to return.',
      'type' => 'int',
      'default value' => 100,
    ),
  );

  $resource['sharedcontent_content'] = array(
    'operations' => array(
      'retrieve' => array(
        'callback' => 'sharedcontent_server_render_content',
        'access callback' => 'sharedcontent_server_service_access',
        'access arguments' => array('view', 'sharedcontent_content'),
        'access arguments append' => TRUE,
        'args' => array(
          'uuid' => array(
            'name' => 'uuid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
            'description' => 'The uuid of the shared content to get',
          ),
          'view_mode' => array(
            'name' => 'view_mode',
            'optional' => TRUE,
            'source' => array('param' => 'mode'),
            'default value' => 'sharedcontent_teaser',
            'type' => 'string',
            'description' => 'The view mode to be used for rendering',
          ),
          'langcode' => array(
            'name' => 'langcode',
            'optional' => TRUE,
            'source' => array('param' => 'lang'),
            'type' => 'string',
            'description' => 'The language to be used for rendering',
          ),
        ),
      ),
    ),
  );

  $resource['sharedcontent_assignments'] = array(
    'operations' => array(
      'retrieve' => array(
        'callback' => 'sharedcontent_server_resource_assignment',
        'access callback' => 'sharedcontent_server_service_access',
        'access arguments' => array('view', 'sharedcontent_assignments'),
        'access arguments append' => TRUE,
        'access arguments' => array('view'),
        'args' => array(
          'uuid' => array(
            'name' => 'uuid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
            'description' => 'The uuid of the assignment to get',
          ),
        ),
      ),
      'update' => array(
        'callback' => 'sharedcontent_server_resource_assignment',
        'access callback' => 'sharedcontent_server_service_access',
        'access arguments' => array('update', 'sharedcontent_assignments'),
        'access arguments append' => TRUE,
        'args' => array(
          'uuid' => array(
            'name' => 'uuid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
            'description' => 'The uuid of the assignment to get',
          ),
          array(
            'name' => 'assignment',
            'optional' => FALSE,
            'source' => 'data',
            'description' => 'The assignment data to update',
            'type' => 'array',
          ),
        ),
      ),
    ),
  );

  $resource['sharedcontent_index'] = array(
    'operations' => array(
      'index' => array(
        'callback' => 'sharedcontent_server_resource_list',
        'access callback' => 'sharedcontent_server_service_access',
        'access arguments' => array('view', 'sharedcontent_index'),
        'access arguments append' => TRUE,
        'args' => $list_resource_args,
      ),
      'retrieve' => array(
        'callback' => 'sharedcontent_server_resource_index',
        'access callback' => 'sharedcontent_server_service_access',
        'access arguments' => array('view', 'sharedcontent_index'),
        'access arguments append' => TRUE,
        'args' => array(
          'uuid' => array(
            'name' => 'uuid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
            'description' => 'The uuid of the index to get',
          ),
        ),
      ),
      'update' => array(
        'callback' => 'sharedcontent_server_resource_index',
        'access callback' => 'sharedcontent_server_service_access',
        'access arguments' => array('update', 'sharedcontent_index'),
        'access arguments append' => TRUE,
        'args' => array(
          'uuid' => array(
            'name' => 'uuid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
            'description' => 'The uuid of the index to get',
          ),
          array(
            'name' => 'assignment',
            'optional' => FALSE,
            'source' => 'data',
            'description' => 'The index data to update',
            'type' => 'array',
          ),
        ),
      ),
    ),
    'actions' => array(
      'count' => array(
        'callback' => 'sharedcontent_server_resource_list_count',
        'access callback' => 'sharedcontent_server_service_access',
        'access arguments' => array('view', 'sharedcontent_index'),
        'access arguments append' => TRUE,
        'args' => array(
          'changed' => $list_resource_args['changed'],
        ),
      ),
    ),
  );

  $resource['sharedcontent_entity_labels'] = array(
    'operations' => array(
      'retrieve' => array(
        'callback' => 'sharedcontent_server_get_local_entity_bundle_labels',
        'access callback' => 'sharedcontent_server_service_access',
        'access arguments' => array('view', 'sharedcontent_entity_labels'),
        'args' => array(
          // @todo do we really expose this argument?
          'entity_type' => array(
            'name' => 'Entity',
            'optional' => TRUE,
            'source' => array('path' => 0),
            'type' => 'string',
            'description' => 'The type of the entity.',
          ),
        ),
      ),
    ),
  );
  return $resource;
}


/**
 * Checks access to a Shared Content service resource.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $endpoint
 *   The name of the endpoint accessed.
 * @param array $args
 *   An array with the arguments passed to the service callback function.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function sharedcontent_server_service_access($op, $endpoint, $args = array()) {
  $access = FALSE;
  switch ($endpoint) {
    case 'sharedcontent_index':
      $index = NULL;
      if (!empty($args['uuid'])) {
        $index = entity_load_by_uuid('sharedcontent_index', $args['uuid']);
      }
      $access = entity_access($op, 'sharedcontent_index', $index ? $index : NULL);
      break;
    case 'sharedcontent_content':
      $index = entity_load_by_uuid('sharedcontent_index', $args['uuid']);
      if ($index->origin == SHAREDCONTENT_INDEX_BUNDLE_LOCAL) {
        $entity = entity_load_single($index->entity_type, $index->entity_id);
        if ($entity) {
          $access = entity_access($op, $index->entity_type, $entity);
        }
      }
      break;
    case 'sharedcontent_assignments':
      if (isset($args['uuid']) && !empty($args['uuid'])) {
        $assignment = entity_load_by_uuid('sharedcontent_assignemnt', $args['uuid']);
        $access = entity_access($op, 'sharedcontent_assignment', $assignment);
      }
      break;
    case 'sharedcontent_entity_labels':
      $access = user_access('access endpoint restricted');
      $access |= user_access('access endpoint full');
      break;
  }

  // entity_access() might return NULL. Ensure we always return a boolean.
  return $access ? TRUE : FALSE;
}

/**
 * Render content and deliver for remote inclusion.
 */
function sharedcontent_server_render_content($uuid, $view_mode = 'sharedcontent_teaser', $langcode = NULL) {
  $index = entity_load_by_uuid('sharedcontent_index', $uuid);
  $entity = sharedcontent_render_content($index, $view_mode, $langcode);

  // now handle forwarding of js / css
  global $base_url;
  $instances = drupal_static(__FUNCTION__);

  $output['content'] = drupal_render($entity);
  $output['base_url'] = $base_url;
  $output['js'] = array();
  $output['inline_js'] = array();
  $output['css'] = array();
  $output['settings'] = array();

  // apply sharedcontent richmedia support
  ctools_include('plugins');
  foreach (ctools_get_plugins('sharedcontent', 'richmedia') as $richmedia) {
    $class = ctools_plugin_get_class($richmedia, 'handler');
    if (!class_exists($class)) {
      sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'Missing Richmedia plugin class', array('richmedia' => $richmedia));
      continue;
    }
    if (!isset($instances[$class])) {
      $instances[$class] = new $class();

      // Check that plugin class has inherited proper 'example_operation' class.
      // @todo inheritance from "example" is wrong. Find better naming?
      if (!is_subclass_of($instances[$class], 'SharedContentRichMedia')) {
        unset($instances[$class]);
        continue;
      }
    }

    $output['js'] = array_merge($output['js'], $instances[$class]->getJsFiles($index, $view_mode, $langcode));
    $output['inline_js'] = array_merge($output['inline_js'], $instances[$class]->getInlineJs($index, $view_mode, $langcode));
    $output['settings'] = array_merge($output['settings'], $instances[$class]->getJsSettings($index, $view_mode, $langcode));
    $output['css'] = array_merge($output['css'], $instances[$class]->getCssFiles($index, $view_mode, $langcode));
  }
  sharedcontent_event_save('sharedcontent_server', __FUNCTION__, 'Deliver content.', array('output' => $output), array('severity' => WATCHDOG_DEBUG));

  return $output;
}

/**
 * Counts index records
 *
 * Callback function for the count action of the index list resource.
 *
 * @param string $changed
 *  Changed date of the oldest record to deliver.
 *
 * @return mixed
 *  The count of the records found.
 */
function sharedcontent_server_resource_list_count($changed = NULL) {
  return _sharedcontent_server_resource_list_query($changed)
    ->count()
    ->execute();
}

/**
 * Lists indexes
 *
 * Callback function to list indexes in services.
 *
 * @param string $changed
 *  Changed date of the oldest record to deliver.
 * @param int $offset
 *  Range offset: number of the first record to deliver.
 * @param int $limit
 *  Range limit: count of records to deliver.
 *
 * @return array
 *  Associative array with the data to be delivered by the service.
 */
function sharedcontent_server_resource_list($changed = NULL, $offset = 0, $limit = 100) {

  $result = _sharedcontent_server_resource_list_query($changed)
    ->range($offset, $limit)
    ->execute();

  $data = array();

  if (isset($result['sharedcontent_index'])) {
    $entities = entity_load('sharedcontent_index', array_keys($result['sharedcontent_index']));
    foreach ($entities as $entity) {
      $data[] = $entity->getExposedAttributes();
    }
  }

  return $data;
}

/**
 * Index list query
 *
 * Build a query object for the index list resource.
 *
 * @param string $changed
 *  Changed date of the oldest record to deliver.
 *
 * @return EntityFieldQuery
 *  The query object.
 */
function _sharedcontent_server_resource_list_query($changed = NULL) {
  $exposed_origins = variable_get('sharedcontent_exposed_origins', array(SHAREDCONTENT_INDEX_BUNDLE_LOCAL));

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'sharedcontent_index')
    ->propertyCondition('origin', $exposed_origins, 'IN')
    ->propertyOrderBy('changed', 'DESC')
    ->addTag('sharedcontent_index_reason_access');

  $changed = strtotime($changed);
  if ($changed) {
    $query->propertyCondition('changed', $changed, '>=');
  }

  return $query;
}

/**
 * Implements hook_sharedcontent_richmedia().
 */
function sharedcontent_sharedcontent_richmedia() {
  if (module_exists('jplayer')) {
    $plugins['jplayer'] = array(
      'label' => t('jPlayer'),
      'handler' => array(
        'class' => 'SharedContentRichMediaJPlayer',
      ),
    );
  }

  if (module_exists('audiofield')) {
    $plugins['audiofield'] = array(
      'label' => t('Audio Field'),
      'handler' => array(
        'class' => 'SharedContentRichMediaAudioField',
      ),
    );
  }

  if (module_exists('jw_player')) {
    $plugins['jw_player'] = array(
      'label' => t('JW Player'),
      'handler' => array(
        'class' => 'SharedContentRichMediaJwPlayer',
      ),
    );
  }

  drupal_alter('sharedcontent_richmedia', $plugins);

  return $plugins;
}

/**
 * Implements hook_file_url_alter().
 *
 * @todo: Use the same callback mechanism as for the CSS and JS.
 */
function sharedcontent_server_file_url_alter(&$uri) {
  // @todo HIGH get rid of plugin specific code here.
  $path = '/' . variable_get('audiofield_players_dir', 'sites/all/libraries/player') . '/jplayer';
  if (!empty($uri) && strpos($path, $uri) !== FALSE) {
    global $base_url;
    $uri = $base_url . $uri;
  }
}

/**
 * Services Callback: Get local entity bundle labels.
 *
 * @param $entity_type
 *   String of entity_type
 * @return
 *   Array with bundles as key and labels as value.
 *
 * @todo HIGH note that if $entity_type is not provided, we only provide node labels.
 */
function sharedcontent_server_get_local_entity_bundle_labels($entity_type = 'node') {
  return sharedcontent_get_local_entity_bundle_labels($entity_type);
}

/**
 * Implements hook_field_access().
 *
 * Prevents access to field unless user has administer shared content permission.
 */
function sharedcontent_server_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'field_sharedcontent_reason' && $op == 'edit') {
    return user_access('administer sharedcontent', $account);
  }
  return TRUE;
}

/**
 * Implements hook_views_pre_view().
 */
function sharedcontent_server_views_pre_view($view, $display_id, $args) {
  if ($view->name == 'sharedcontent_service') {
    // @todo: The editing flag is set to prevent translation of the labels. Find
    // a better way.
    $view->editing = TRUE;

    // This somehow does not work.
    // $view->localization_plugin = views_get_plugin('localization', 'none');
  }
}

/**
 * Implements hook_entity_insert().
 *
 * @see sharedcontent_server_entity_update()
 */
function sharedcontent_server_entity_insert(EntityInterface $entity) {
  sharedcontent_server_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Check if the given entity should be index and trigger an index update.
 */
function sharedcontent_server_entity_update(EntityInterface $entity) {
  if (\Drupal::service('sharedcontent.indexing')->isIndexable($entity)) {
    // Add nodes to be indexed to a queue if setting is active.
    if (\Drupal::config('sharedcontent.settings')->get('queued')) {
      $item = array(
        'entity_id' => $entity->id(),
        'type' => $entity->entityType(),
      );
      $queue = \Drupal::queue('sharedcontent_indexing');
      $queue->createItem($item);
    }
    else {
      \Drupal::service('sharedcontent.indexing')->indexEntity($entity);
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Set sharedcontent_index to
 * \Drupal\sharedcontent\IndexInterface::STATUS_NOT_REACHABLE if a record
 * exists.
 */
function sharedcontent_server_entity_delete($entity, $type) {
  \Drupal::service('sharedcontent.indexing')->indexDeletedEntity($entity);
}

/**
 * Implements hook_queue_info().
 */
function sharedcontent_server_queue_info() {
  $queues['sharedcontent_indexing'] = array(
    'title' => t('SharedContent Indexing'),
    'worker callback' => 'sharedcontent_server_indexing_queue_callback',
    'cron' => array(
      'time' => 30,
    ),
  );
  return $queues;
}

/**
 * Callback function for the indexing queue.
 *
 * @param array $data
 *   The queued data item.
 */
function sharedcontent_server_indexing_queue_callback(array $data) {
  \Drupal::service('sharedcontent.indexing')->indexQueuedEntity($data);
}

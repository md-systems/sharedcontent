<?php
/**
 * @file
 * Shared content core functions.
 *
 * Definition hooks rules and crud functions used in both the Shared Content
 * server and the Shared Content client.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityChangedInterface;
use Drupal\file\FileInterface;
use Drupal\sharedcontent\AssignmentInterface;
use Drupal\sharedcontent\Entity\Index;
use Drupal\sharedcontent\Exception\IndexingException;
use Drupal\sharedcontent\IndexInterface;

/**
 * Implements hook_permission().
 */
function sharedcontent_permission() {
  return array(
    'administer sharedcontent' => array(
      'title' => t('Administer Shared Content'),
    ),
    'access endpoint restricted' => array(
      'title' => t('Endpoint access'),
    ),
    'access endpoint full' => array(
      'title' => t('Endpoint access with no restrictions'),
    ),
  );
}

function sharedcontent_menu() {
  $items = array();

  $items['admin/config/services/sharedcontent'] = array(
    'title' => 'Shared Content',
    'description' => 'Configuration and status overview for Shared Content',
    'page callback' => 'sharedcontent_status_view',
    'access arguments' => array('administer sharedcontent'),
    'file' => 'includes/sharedcontent.admin.inc',
  );

  $items['admin/config/services/sharedcontent/settings/indexed'] = array(
    'title' => 'Indexed entities',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Select the entities which are indexed for Shared Content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharedcontent_configure_indexed'),
    'access arguments' => array('administer sharedcontent'),
    'file' => 'includes/sharedcontent.admin.inc',
  );

  $items['admin/config/services/sharedcontent/status'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  return $items;
}

function sharedcontent_menu_alter(&$items) {
  if (isset($items['admin/config/services/sharedcontent/index/fields'])) {
    $index_fields = $items['admin/config/services/sharedcontent/index/fields'];
    $items['admin/config/services/sharedcontent/index/fields'] = array(
      'title' => $index_fields['title'] ? $index_fields['title'] : '',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $index_fields['title'] = 'Shared Content Index';
    $items['admin/config/services/sharedcontent/index'] = $index_fields;

    $candidates = array(
      'admin/config/services/sharedcontent/settings/keywords',
      'admin/config/services/sharedcontent/settings/server',
      'admin/config/services/sharedcontent/settings/linkables',
      'admin/config/services/sharedcontent/settings/indexed',
    );

    foreach ($candidates as $candidate_path) {
      if (isset($items[$candidate_path])) {
        $candidate = $items[$candidate_path];
        $items[$candidate_path] = array(
          'title' => $candidate['title'],
          'type' => MENU_DEFAULT_LOCAL_TASK,
        );
        $candidate['title'] = 'Settings';
        $items['admin/config/services/sharedcontent/settings'] = $candidate;
        break;
      }
    }
  }
}

/**
 * Implements hook_entity_bundle_info().
 */
function sharedcontent_entity_bundle_info() {
  $bundles = array(
    'local' => array(
      'label' => t('Local'),
    ),
    'remote' => array(
      'label' => ('Remote'),
    ),
    'shadow' => array(
      'label' => ('Shadow'),
    ),
  );
  return array(
    'sharedcontent_index' => $bundles,
    'sharedcontent_assignment' => $bundles,
  );
}

/**
 * Implements MODULE_preprocess_HOOK().
 *
 * @todo doc
 *
 * @see sharedcontent_get_connection_labels()
 * @see sharedcontent_get_all_entity_bundle_labels()
 */
function sharedcontent_preprocess_entity(&$variables) {
  if (!isset($variables['elements']['#entity_type']) || $variables['elements']['#entity_type'] != 'sharedcontent_index') {
    return;
  }

  $index = $variables['sharedcontent_index'];

  $variables['public'] = $index->accessibility == IndexInterface::ACCESSIBILITY_PUBLIC;
  $variables['restricted'] = $index->accessibility == IndexInterface::ACCESSIBILITY_RESTRICTED;
  $variables['no_access'] = $index->accessibility == IndexInterface::ACCESSIBILITY_NONE;

  $variables['unreachable'] = $index->status == IndexInterface::STATUS_NOT_REACHABLE;
  $variables['linkable'] = $index->status == IndexInterface::STATUS_LINKABLE;
  $variables['visible'] = $index->status == IndexInterface::STATUS_VISIBLE;


  $content = array();

  // Add several icons
  $content['icons'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('sharedcontent-icons'),
    ),
  );

  if ($variables['no_access']) {
    $content['icons']['no_access'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="sharedcontent-no-access" title="' . t('Not Accessible') . '"></div>'
    );
  }

  if ($variables['restricted']) {
    $content['icons']['restricted'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="sharedcontent-restricted" title="' . t('Access restricted') . '"></div>'
    );
  }

  if ($variables['public']) {
    $content['icons']['public'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="sharedcontent-public" title="' . t('Public') . '"></div>'
    );
  }

  if ($variables['unreachable']) {
    $content['icons']['unreachable'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="sharedcontent-unreachable" title="' . t('Not Reachable') . '"></div>'
    );
  }

  if ($variables['linkable']) {
    $content['icons']['linkable'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="sharedcontent-linkable" title="' . t('Linkable') . '"></div>'
    );
  }

  if ($variables['visible']) {
    $content['icons']['visible'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="sharedcontent-visible" title="' . t('Visible') . '"></div>'
    );
  }

  // Add the origin
  $names = sharedcontent_get_connection_labels();
  if (!empty($index->connection_name)) {
    $content['connection-name'] = array(
      '#type' => 'markup',
      '#markup' => isset($names[$index->connection_name]) ? $names[$index->connection_name] : $index->connection_name,
      '#prefix' => '<div class="sharedcontent-connection-name">',
      '#suffix' => '</div>',
    );
  }

  // Add the bundle label.
  $types = sharedcontent_get_all_entity_bundle_labels();
  $content['type'] = array(
    '#type' => 'markup',
    '#markup' => isset($types[$index->entity_bundle]) ? $types[$index->entity_bundle] : $index->entity_bundle,
    '#prefix' => '<div class="sharedcontent-index-type">',
    '#suffix' => '</div>',
  );

  // Show parent record if this is a chapter.
  if (!empty($index->parent_uuid) && $index->parent_uuid != IndexInterface::ORPHAN) {
    $parent_index = sharedcontent_index_load_by_uuid($index->parent_uuid);
    $content['chapter'] = array(
      '#type' => 'link',
      '#title' => $parent_index->title,
      '#href' => $parent_index->url,
      '#options' => array(
        'attributes' => array(
          'title' => t('Chapter of: @title', array(
            '@title' => $parent_index->title
          )),
          'class' => array(
            'sharedcontent-chapter-icon',
            'sharedcontent-origin'
          ),
        ),
      ),
      '#prefix' => '<div class="sharedcontent-chapter">',
      '#suffix' => '</div>',
    );
  }

  // Add the keywords and the tags as one big bag of words.
  $content['bag_of_words'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('sharedcontent-words'),
      'title' => t('Keywords'),
    ),
    'keywords' => array(
      '#type' => 'markup',
      '#markup' => $index->keywords,
      '#prefix' => '<span class="keywords">',
      '#suffix' => '</span>',
    ),
    // @todo is there a better solution here?
    'space' => array(
      '#type' => 'markup',
      '#markup' => ' ',
    ),
    'tags' => array(
      '#type' => 'markup',
      '#markup' => $index->tags,
      '#prefix' => '<span class="tags">',
      '#suffix' => '</span>',
    ),
  );

  $variables['content'] = $content;

  // Add css to format the rendered sharedcontent_index.
  $path = drupal_get_path('module', 'sharedcontent');
  drupal_add_css($path . '/css/sharedcontent.css');
}

/**
 * Checks access to sharedcontent_index.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $entity_type
 *   The entity type of the entity to check for.
 * @param $entity
 *   Optionally an entity to check access for. If no entity is given, it will be
 *   determined whether access is allowed for all entities of the given type.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 *
 * @see entity_access()
 */
function sharedcontent_index_access($op, $entity = NULL, $account = NULL, $entity_type = NULL) {
  // Grant access if user has full access.
  if (user_access('access endpoint full', $account)) {
    return TRUE;
  }

  // Skip early if user does not have any access.
  if (!user_access('access endpoint restricted', $account)) {
    return FALSE;
  }

  // Grant access if reason checking is disabled.
  if (!variable_get('sharedcontent_check_reason', FALSE)) {
    return TRUE;
  }
  // Grant access if no specific entity is provided.
  elseif (!$entity) {
    return TRUE;
  }
  // Check reasons.
  else {
    $index_items = field_get_items('sharedcontent_index', $entity, 'field_sharedcontent_reason');
    // Skip early if there are no reasons to match.
    if (empty($index_items)) {
      return FALSE;
    }

    // Use global user if no account was provided.
    if (!$account) {
      global $user;
      $account = $user;
    }

    // Reload user to get a record including the attached fields.
    $account = entity_load_single('user', $account->uid);

    // No valid user detected.
    if (!$account) {
      return FALSE;
    }

    $user_items = field_get_items('user', $account, 'field_sharedcontent_reason');
    // Skip early if there are no reasons to match.
    if (empty($user_items)) {
      return FALSE;
    }

    $user_reasons = array();
    foreach ($user_items as $reason) {
      $user_reasons[] = $reason['tid'];
    }

    foreach ($index_items as $reason) {
      if (in_array($reason['tid'], $user_reasons)) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Checks access to sharedcontent_assignment.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $entity_type
 *   The entity type of the entity to check for.
 * @param $entity
 *   Optionally an entity to check access for. If no entity is given, it will be
 *   determined whether access is allowed for all entities of the given type.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 *
 * @see entity_access()
 */
function sharedcontent_assignment_access($op, $entity = NULL, $account = NULL, $entity_type = NULL) {
  return user_access('access endpoint full', $account) || user_access('access endpoint restricted', $account);
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Restrict access to the exposed index by the corresponding taxonomy terms.
 */
function sharedcontent_query_sharedcontent_index_reason_access_alter(QueryAlterableInterface $query) {
  // Do not restrict if full access is granted.
  // Also do not check if feature is disabled.
  if (user_access('access endpoint full') || !variable_get('sharedcontent_check_reason', FALSE)) {
    return;
  }

  // Join index with term.
  $query->join(
    'field_data_field_sharedcontent_reason',
    'reason', "reason.entity_type = 'sharedcontent_index' and reason.entity_id = sharedcontent_index.id");
  // Join term with user.
  $query->join('field_data_field_sharedcontent_reason', 'user_reason',
    'user_reason.entity_type = \'user\' and user_reason.entity_id = :uid AND reason.field_sharedcontent_reason_tid = user_reason.field_sharedcontent_reason_tid',
    array(':uid' => $GLOBALS['user']->uid));
  // Ensure unique results.
  $query->distinct();
}

/**
 * Implements hook_rules_action_info().
 *
 * @see sharedcontent_rules_get_term()
 * @see sharedcontent_rules_get_keywords()
 * @see sharedcontent_rules_get_tags()
 * @see \Drupal\sahredcontent\IndexInterface::indexEntity()
 * @see sharedcontent_index_mark_as_deleted_if_exists()
 */
function sharedcontent_rules_action_info() {
  return array(
    'sharedcontent_rules_get_term' => array(
      'label' => t('Index reason'),
      'group' => t('Shared Content'),
      'parameter' => array(
        'vocab_name' => array(
          'label' => t('Vocabulary name'),
          'type' => 'text',
        ),
        'term_name' => array(
          'label' => t('Reason'),
          'type' => 'text',
        ),
      ),
      'provides' => array(
        'term' => array(
          'label' => t('Term'),
          'type' => 'taxonomy_term',
        ),
      ),
    ),
    'sharedcontent_rules_get_keywords' => array(
      'label' => t('Get content keywords'),
      'group' => t('Shared Content'),
      'parameter' => array(
        'local_content' => array(
          'label' => t('Local Content'),
          'type' => 'entity',
          'wrapped' => FALSE,
        ),
        'local_content_type' => array(
          'label' => t('Local Content Type'),
          'type' => 'text',
        ),
      ),
      'provides' => array(
        'keywords' => array(
          'label' => t('Content keywords'),
          'type' => 'text',
        ),
      ),
    ),
    'sharedcontent_rules_get_tags' => array(
      'label' => t('Get content tags'),
      'group' => t('Shared Content'),
      'parameter' => array(
        'local_content' => array(
          'label' => t('Local Content'),
          'type' => 'entity',
          'wrapped' => FALSE,
        ),
        'local_content_type' => array(
          'label' => t('Local Content Type'),
          'type' => 'text',
        ),
      ),
      'provides' => array(
        'tags' => array(
          'label' => t('Content tags'),
          'type' => 'text',
        ),
      ),
    ),
    'sharedcontent_create_or_update_index_for_entity' => array(
      'label' => t('Create or update an index record'),
      'group' => t('Shared Content'),
      'parameter' => array(
        'entity' => array(
          'label' => t('Entity'),
          'type' => 'entity',
          'skip safe' => TRUE,
          'wrapped' => FALSE,
        ),
        'type' => array(
          'label' => t('Entity type'),
          'type' => 'text',
        ),
      ),
    ),
    'sharedcontent_index_mark_as_deleted_if_exists' => array(
      'label' => t('Set existing index to status deleted'),
      'group' => t('Shared Content'),
      'parameter' => array(
        'entity' => array(
          'label' => t('Entity'),
          'type' => 'entity',
          'skip safe' => TRUE,
          'wrapped' => FALSE,
        ),
        'type' => array(
          'label' => t('Entity type'),
          'type' => 'text',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_rules_action_info().
 *
 * @see sharedcontent_condition_index_record_exists()
 */
function sharedcontent_rules_condition_info() {
  return array(
    'sharedcontent_condition_index_record_exists' => array(
      'label' => t('Check for existing index record'),
      'group' => t('Shared Content'),
      'parameter' => array(
        'local_content' => array(
          'label' => t('Local Content'),
          'type' => 'entity',
          'wrapped' => FALSE,
        ),
        'local_content_type' => array(
          'label' => t('Local Content Type'),
          'type' => 'text',
        ),
        'language' => array(
          'label' => t('Langauge'),
          'type' => 'text',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_rules_event_info().
 *
 * @see sharedcontent_index_is_being_updated()
 * @see sharedcontent_index_is_being_created()
 * @see sharedcontent_assignment_client_link()
 * @see sharedcontent_assignment_client_unlink()
 */
function sharedcontent_rules_event_info() {
  $info['sharedcontent_index_is_being_updated'] = array(
    'label' => t('Shared Content index is being updated'),
    'group' => t('Shared Content'),
    'variables' => array(
      'index' => array(
        'label' => t('Shared Content Index'),
        'type' => 'sharedcontent_index',
        'description' => t('The index record.'),
        'skip save' => TRUE,
      ),
      'entity' => array(
        'label' => t('Entity'),
        'type' => 'entity',
        'description' => t('The entity the index record is referring to.'),
        'skip save' => TRUE,
      ),
    ),
    $info['sharedcontent_chapter_index_is_being_saved'] = array(
      'label' => t('Shared Content chapter index is being updated'),
      'group' => t('Shared Content'),
      'variables' => array(
        'index' => array(
          'label' => t('Shared Content Index'),
          'type' => 'sharedcontent_index',
          'description' => t('The index record.'),
          'skip save' => TRUE,
        ),
        'item' => array(
          'label' => t('Field Collection Item'),
          'type' => 'field_collection_item',
          'description' => t('The field collection item that may be a chapter record.'),
          'skip save' => TRUE,
        ),
        'parent' => array(
          'label' => t('Parent entity'),
          'type' => 'entity',
          'description' => t('The parent entity of hte field collection item.'),
          'skip save' => TRUE,
        ),
      ),
    ),
  );

  $info['sharedcontent_index_is_being_created'] = $info['sharedcontent_index_is_being_updated'];
  $info['sharedcontent_index_is_being_created']['label'] = t('Shared Content index is being created');

  $info['sharedcontent_assignment_client_link'] = array(
    'label' => t('Content was linked on client.'),
    'group' => t('Shared Content'),
    'variables' => array(
      'assignment' => array(
        'label' => t('Shared Content Assignment'),
        'type' => 'sharedcontent_assignment',
        'description' => t('The assignment record describing the new linking.'),
        'skip save' => TRUE,
      ),
      'source' => array(
        'label' => t('Source index record'),
        'type' => 'sharedcontent_index',
        'description' => t('The index record of the source.'),
      ),
      'target' => array(
        'label' => t('Target index record'),
        'type' => 'sharedcontent_index',
        'description' => t('The index record of the target.'),
      ),
    ),
  );

  $info['sharedcontent_assignment_client_unlink'] = $info['sharedcontent_assignment_client_link'];
  $info['sharedcontent_assignment_client_unlink']['label'] = t('Content was unlinked on client');

  return $info;
}

/**
 * Implements hook_services_client_connection_load().
 *
 * Loads custom Shared Content settings from $conf.
 */
function sharedcontent_services_client_connection_load(&$connection) {
  global $conf;

  if (empty($connection) || !is_object($connection) || !empty($connection->_shared_content_processed)) {
    return;
  }

  // Check all connection properties.
  foreach ($connection as $key => &$value) {
    if ($key == 'name') {
      continue;
    }

    // Support nested overrides.
    if (is_array($value)) {
      sharedcontent_services_nested_override($connection, $value, $key . '|');
      continue;
    }

    $setting_offset = "sharedcontent_{$connection->name}_{$key}";

    if (isset($conf[$setting_offset])) {
      $connection->$key = $conf[$setting_offset];
    }
  }

  $connection->_shared_content_processed = TRUE;
}

/**
 * Overrides nested properties of a connection object.
 */
function sharedcontent_services_nested_override($connection, &$values, $prefix = '') {
  global $conf;
  foreach ($values as $key => &$value) {
    if (is_array($value)) {
      sharedcontent_services_nested_override($connection, $value, $prefix . $key . '|');
      continue;
    }
    $setting_offset = "sharedcontent_{$connection->name}_$prefix" . $key;
    if (isset($conf[$setting_offset])) {
      $value = $conf[$setting_offset];
    }
  }
}

/**
 * Get the id of a taxonomy term by name.
 *
 * If the term does not exits, it will be created.
 *
 * @param $vocab_name
 *   The machine name of the vocabulary.
 * @param $term_name
 *   The name of the term
 * @return
 *   Array with 'term' as key and the term as value.
 */
function sharedcontent_rules_get_term($vocab_name, $term_name) {
  $terms = taxonomy_get_term_by_name($term_name, $vocab_name);
  if (empty($terms)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocab_name);
    if (!$vocabulary) {
      $vocabulary = entity_create('taxonomy_vocabulary', array(
        'name' => drupal_ucfirst(str_replace('_', ' ', $vocab_name)),
        'machine_name' => $vocab_name,
        'description' => 'Reasons for why a shared Content Index record exists.',
        'module' => 'sharedcontent',
      ));
      taxonomy_vocabulary_save($vocabulary);
      sharedcontent_event_save('sharedcontent', __FUNCTION__, 'Created new taxonomy vocabulary', array($vocabulary));
    }
    $term = entity_create('taxonomy_term', array(
      'name' => drupal_ucfirst($term_name),
      'description' => '',
      'parent' => array(0),
      'vid' => $vocabulary->vid,
    ));
    taxonomy_term_save($term);
    $terms[] = $term;
  }
  return array('term' => reset($terms));
}

/**
 * Extract a bunch of tags for a given local content.
 *
 * @param $entity
 *   The entity object of the local content
 * @param $entity_type
 *    The entity type of the local content as string.
 * @return
 *   String with space separated tags.
 */
function sharedcontent_rules_get_tags($entity, $entity_type) {
  $tags = array();

  if (module_exists('sharedcontent_autotagging')) {
    $tags = sharedcontent_autotagging_get_tags($entity, $entity_type);
  }

  drupal_alter('sharedcontent_index_tags', $tags, $entity, $entity_type);

  // @todo MEDIUM this doesn't really work for tags with spaces (Combined names)
  // @todo possibly switch to terms
  return array('tags' => implode(' ', $tags));
}

/**
 * Extract a bunch of keywords for a given local content.
 *
 * @param \Drupal\sharedcontent\Plugin\Core\Entity\Index $entity
 *   The entity object of the local content
 * @param $entity_type
 *    The entity type of the local content as string.
 *
 * @return array
 *   String with space separated keywords.
 */
function sharedcontent_rules_get_keywords(Index $entity, $entity_type) {
  $keywords = array();
  $bundle = $entity->bundle();
  $active_fields = variable_get('sharedcontent_keyword_fields', array());
  if (!empty($active_fields[$entity_type][$bundle])) {
    foreach ($active_fields[$entity_type][$bundle] as $field_name => $field_active) {
      if ($field_active && field_info_instance($entity_type, $field_name, $bundle)) {
        $tids = array();
        if ($items = field_get_items($entity_type, $entity, $field_name)) {
          foreach ($items as $item) {
            $tids[] = $item['tid'];
          }
        }
        foreach (taxonomy_term_load_multiple($tids) as $term) {
          $keywords[] = $term->name;
        }
      }
    }
  }

  drupal_alter('sharedcontent_index_keywords', $keywords, $entity, $entity_type);

  return array('keywords' => implode(' ', $keywords));
}

/**
 * Check if there is already an index record for a given local content.
 *
 * @param \Drupal\sharedcontent\Plugin\Core\Entity\Index $entity
 *   The entity object of the local content
 * @param $type
 *    The entity type of the local content as string.
 * @param $language
 *    Language code of the local content.
 *
 * @return bool
 *   TRUE if there is already an index record, FALSE otherwise.
 *
 * @see sharedcontent_index_load_by_entity_id()
 */
function sharedcontent_condition_index_record_exists(Index $entity, $type, $language) {
  return sharedcontent_index_load_by_entity_id($index->id(), $type, $language) != NULL;
}

/**
 * Loads an sahredcontent_index from the database.
 *
 * @param int $id
 *   The id of the index to load.
 * @param bool $reset
 *   Whether to reset the internal cache. Defaults to false.
 *
 * @return Drupal\sharedcontent\IndexInterface|null
 *   The index object, or NULL if there is no index with the given id.
 */
function sharedcontent_index_load($id, $reset = FALSE) {
  return entity_load('sharedcontent_index', $id, $reset);
}

/**
 * Load an sharedcontent_index by entity.
 *
 * For we only need this locally, this function will only return a
 * index record of type \Drupal\sharedcontent\IndexInterface::BUNDLE_LOCAL.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity to search index record for.
 *
 * @return \Drupal\sharedcontent\IndexInterface|null
 *   The index object, or NULL if there is no index for the given entity.
 */
function sharedcontent_index_load_by_entity(EntityInterface $entity) {
  $results = entity_load_multiple_by_properties('sharedcontent_index', array(
    'entity_uuid' => $entity->uuid(),
    'entity_type' => $entity->entityType(),
    'origin' => IndexInterface::BUNDLE_LOCAL,
    'langcode' => $entity->language()->id,
  ));
  return array_shift($results);
}

/**
 * Load a sharedcontent_index by uuid.
 *
 * @param $uuid
 *   Uuid the of the record.
 * @return
 *   sharedcontent_index entity object if one exists, otherwise NULL.
 */
function sharedcontent_index_load_by_uuid($uuid) {
  $entities = entity_load('sharedcontent_index', FALSE, array('uuid' => $uuid));
  return reset($entities);
}

/**
 * Load a sharedcontent_assignment by uuid.
 *
 * @param $uuid
 *   Uuid of the record.
 * @return
 *   sharedcontent_assignment entity object if one exits, NULL otherwise.
 */
function sharedcontent_assignment_load_by_uuid($uuid) {
  $entities = entity_load('sharedcontent_assignment', FALSE, array('uuid' => $uuid));
  return reset($entities);
}

/**
 * Implements hook_theme().
 */
function sharedcontent_theme($existing, $type, $theme, $path) {
  return array(
    'sharedcontent' => array(
      'render element' => 'elements',
      'template' => 'sharedcontent',
    ),
    'sharedcontent_index' => array(
      'render element' => 'elements',
      'template' => 'sharedcontent-index',
    ),
  );
}

/**
 * Process variables for sharedcontent.tpl.php.
 *
 * @see sharedcontent.tpl.php
 * @see sharedcontent_render_content()
 *
 * @todo This does probably not work for every entity so this needs to be
 * enhanced for those non EntityAPI entities.
 */
function sharedcontent_preprocess_sharedcontent(&$variables) {
  global $theme_key;

  // Get info about the rendered entity.
  $type = $variables['elements']['#entity_type'];
  $info = entity_get_info($type);

  $entity = isset($variables['elements']['#' . $type]) ? $variables['elements']['#' . $type] : $variables['elements']['#entity'];

  // Add additional information used in the template.
  $variables['title'] = entity_label($type, $entity);
  $variables['uuid'] = $variables['elements']['#uuid'];
  $uri = entity_uri($type, $entity);
  $uri_options = $uri['options'];
  $uri_options['absolute'] = TRUE;
  $variables['entity_url'] = url($uri['path'], $uri_options);

  // Call preprocess functions of the original theme name.
  $theme = isset($variables['elements']['#original_theme']) ? $variables['elements']['#original_theme'] : $type;
  $hook = 'preprocess_' . $theme;

  $function = 'template_' . $hook;
  if (function_exists($function)) {
    $function($variables, $theme);
  }

  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $function($variables, $theme);
    }
  }

  $function = $theme_key . '_' . $hook;
  if (function_exists($function)) {
    $function($variables, $theme);
  }

  // Remove theme hook suggestions provided by these preprocess fuctions.
  $variables['theme_hook_suggestions'] = array();

  if ($type != $theme) {
    // Add a theme hook suggestion for the original template name if it
    // is not the same as the entity type (usually 'entity').
    $variables['theme_hook_suggestions'][] = 'sharedcontent__' . $theme;
  }
  $variables['theme_hook_suggestions'][] = 'sharedcontent__' . $type;

  // Add classes similar to the drupal default.
  if (isset($info['entity keys']['bundle'])) {
    $bundle_attribute = $info['entity keys']['bundle'];
    $variables['classes_array'][] = drupal_html_class($type . '-' . $entity->$bundle_attribute);
    $variables['theme_hook_suggestions'][] = 'sharedcontent__' . $type . '__' . $entity->$bundle_attribute;
  }

  if (isset($variables['attributes_array']['about'])) {
    $variables['attributes_array']['about'] = $variables['entity_url'];
  }
}

/**
 * Simplified content rendering.
 *
 * Used when exposing a content through a service or for displaying a shared
 * content with local origin.
 *
 * @param $index
 *   The Shared Content index record.
 * @param $view_mode
 *   The view mode to be used for rendering. Defaults to 'sharedcontent_teaser'.
 * @param $langcode
 *   The language the content should be rendered in.
 * @param $handle_js
 *   Determine whether or not to handle exposed js files. Defaults to TRUE.
 * @return
 *   The renderable array, extended and cleaned for sharedcontent.
 *
 * @see sharedcontent_index_load_by_uuid()
 * @see sharedcontent_preprocess_sharedcontent()
 */
function sharedcontent_render_content($index, $view_mode = 'sharedcontent_teaser', $langcode = NULL) {
  $entity = entity_load($index->entity_type, array($index->entity_id));
  $entity = entity_view($index->entity_type, $entity, $view_mode, $langcode);
  foreach ($entity as $entity_type => $entries) {
    foreach (element_children($entries) as $id) {
      // We do not want to leak the contextual links to other pages.
      unset($entity[$entity_type][$id]['#contextual_links']);
      $entity[$entity_type][$id]['#original_theme'] = $entity[$entity_type][$id]['#theme'];
      $entity[$entity_type][$id]['#theme'] = 'sharedcontent';
      $entity[$entity_type][$id]['#uuid'] = $index->uuid;
    }
  }

  return $entity;
}

/**
 * Implements hook_css_alter().
 *
 * Filter remote css includes that are already in the list.
 */
function sharedcontent_css_alter(&$css) {
  sharedcontent_render_alter($css);
}

/**
 * Implements hook_js_alter().
 *
 * Filter remote js includes that are already in the list.
 */
function sharedcontent_js_alter(&$javascript) {
  sharedcontent_render_alter($javascript);
}

/**
 * Filter render items that are already in the list.
 *
 * See   drupal_process_attached how this all comes together
 * http://api.drupal.org/api/drupal/includes%21common.inc/function/drupal_process_attached/7
 */
function sharedcontent_render_alter(&$data) {
  $remote_added = array();
  // The same files are sometimes embedded with a different path, allow sites to define
  // a mapping for them.
  $asset_mapping = variable_get('sharedcontent_asset_mapping', array());
  foreach ($data as $url => $options) {
    if ($options['type'] == 'external' && !empty($options['sharedcontent_original_path'])) {
      // remote record.
      $original_item = $options['sharedcontent_original_path'];
      $local_item = isset($asset_mapping[$original_item]) ? $asset_mapping[$original_item] : $original_item;
      // @todo once the queries are cleanly encoded, urldecode the remote path here! parse_url()
      if (isset($data[$local_item]) || isset($remote_added[$original_item])) {
        // There is a remote item that matches the local item or it was already added as remote
        // remove the new remote entry.
        unset($data[$url]);
        continue;
      }
      $remote_added[$original_item] = $original_item;
    }
  }
}


/**
 * Implements hook_ctools_plugin_type()
 */
function sharedcontent_ctools_plugin_type() {
  // @todo HIGH rename to sharedcontent_richmedia
  $plugins['richmedia'] = array(
    'use hooks' => TRUE,
  );
  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function sharedcontent_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference' && $plugin == 'selection') {
    return 'plugins/selection';
  }
}

/**
 * Check if a overlay representation is requested.
 *
 * Always use sharedcontent_is_overlay_request() to detect overlay
 * request mode and apply overlay specific link behaviour through JS.
 *
 * Do never modify static output in order to net mess with caching!
 *
 * @return bool
 *   TRUE if the page will be rendered for overlay display, FALSE otherwise.
 */
function sharedcontent_is_overlay_request() {
  $is_overlay = & drupal_static(__FUNCTION__);
  if (is_null($is_overlay)) {
    $is_overlay = FALSE;
    if (isset($_GET['sc'])) {
      if (is_array($_GET['sc'])) {
        $is_overlay = !empty($_GET['sc']['overlay']);
        // We need to remove this get argument from the _GET to avoid
        // having e.g. pager links polluted with static targets.
        unset($_GET['sc']['overlay']);
        if (empty($_GET['sc'])) {
          unset($_GET['sc']);
        }
      }
      else {
        sharedcontent_event_save(
          'sharedcontent',
          __FUNCTION__,
          'The get parameter <em>sc</em> seems to be used by somone other than Shared Content.',
          array('parameter value' => $_GET['sc']),
          array('severity' => WATCHDOG_NOTICE)
        );
      }
    }
  }
  return $is_overlay;
}

/**
 * Get connection labels.
 *
 * Get a list of labels for services connections.
 *
 * @param $sc_only
 *    If TRUE, include only sharedcontent enabled connections, all otherwise.
 * @param $include_local
 *   If TRUE, add an additional value referring to the local system.
 * @return
 *   Associative array with the connections machine name as key and
 *   the human readable label as value.
 *
 * @see sharedcontent_client_get_connections()
 */
function sharedcontent_get_connection_labels($sc_only = TRUE, $include_local = TRUE) {
  $connections = array();

  // Add local as connection.
  if ($include_local && variable_get('sharedcontent_include_local', FALSE)) {
    $connections['local'] = 'Local';
  }

  // We can only grab connections if the services_client module is enabled.
  // This is normally only the case on clients. So on servers we skip this part.
  if (function_exists('sharedcontent_client_get_connections')) {
    foreach (sharedcontent_client_get_connections(FALSE, $sc_only) as $connection) {
      $connections[$connection->name] = $connection->admin_title;
    }
  }

  return $connections;
}

/**
 * Get index status labels.
 *
 * Get a list of human readable labels for the sharedcontent_index
 * status values.
 *
 * @return array
 *  Associative array with the status values as keys and
 *  the labels as value.
 */
function sharedcontent_get_index_status_labels() {
  return array(
    IndexInterface::STATUS_VISIBLE => 'Visible',
    IndexInterface::STATUS_LINKABLE => 'Linkable',
    IndexInterface::STATUS_NOT_REACHABLE => 'Deleted',
  );
}

/**
 * Get assignment status labels.
 *
 * Get a list of human readable labels for the sharedcontent_assignment
 * status values.
 *
 * @return array
 *  Associative array with the status values as keys and
 *  the labels as value.
 */
function sharedcontent_get_assignment_status_labels() {
  return array(
    AssignmentInterface::STATUS_ACTIVE => 'Active',
    AssignmentInterface::STATUS_DELETED => 'Deleted',
  );
}

/**
 * Get local entity bundle labels.
 *
 * @param string $entity_type
 *   String of entity_type
 * @param array $bundles
 *   Array of entity types the bundles should be fetched for.
 *
 * @return array
 *   Array with bundles as key and labels as value.
 */
function sharedcontent_get_local_entity_bundle_labels($entity_type = 'node', array $bundles = array()) {
  $labels = array();
  $entity_info = entity_get_info($entity_type);
  if (empty($bundles) && is_array($entity_info['bundles'])) {
    $bundles = array_keys($entity_info['bundles']);
  }
  $single = count($entity_info['bundles']) == 1;
  foreach ($bundles as $bundle) {
    if (empty($entity_info['bundles'][$bundle])) {
      continue;
    }
    $prefix = '';
    // Build prefix for non-node entities that have multiple bundles.
    if ($entity_type != 'node' and !$single) {
      $prefix = $entity_info['label'];
    }
    if (empty($prefix)) {
      // @todo should we extend the structure to $labels[$entity_type][$bundle]?
      $labels[$bundle] = $entity_info['bundles'][$bundle]['label'];
    }
    else {
      $labels[$bundle] = t('@prefix: @label', array(
        '@prefix' => $prefix,
        '@label' => $entity_info['bundles'][$bundle]['label']
      ));
    }
  }
  return $labels;
}

/**
 * Get all bundle labels.
 *
 * Gets a list of labels for all entity bundles that are stored in the
 * sharedcontent index.
 * For performance reasons this uses caching.
 *
 * @return
 *    Associative array with the bundle key as key and the bundle label
 *    as value.
 *
 * @todo Do value deduplication. When there are two identical labels
 *       add the key in brackets to the label e.g "Article (my_article)".
 * @todo test: we need text coverage for deduplication / entity labels merge
 *
 * @see sharedcontent_get_local_entity_bundle_labels()
 * @see sharedcontent_client_get_remote_entity_bundle_labels()
 */
function sharedcontent_get_all_entity_bundle_labels() {
  $labels = & drupal_static(__FUNCTION__ . '_key');
  if (empty($labels)) {
    $results = array();

    $types = array();
    $cache_key = '';

    // @todo why do we first need to create a special key?
    if ($cache = cache_get(__FUNCTION__)) {
      $cache_key = $cache->data['key'];
      $types = $cache->data['types'];
    }
    if (empty($types)) {
      // @todo This might be in different order for every request.
      // Check index for all available entity_type and entity_bundle values.
      $results = db_select('sharedcontent_index', 'i')
        // @todo add filter for local records only?
        ->fields('i', array('entity_type', 'entity_bundle'))
        ->distinct(TRUE)
        ->execute();

      // Build structure for entities + bundles enumeration.
      foreach ($results as $row) {
        $types[$row->entity_type][$row->entity_bundle] = $row->entity_bundle;
        $cache_key .= $row->entity_type . $row->entity_bundle;
      }

      $cache_key = 'sharedcontent_entity_bundle_labels::' . sha1($cache_key);
      $data = array(
        'key' => $cache_key,
        'types' => $types,
      );
      cache_set(__FUNCTION__, $data, 'cache', time() + 3600);
    }

    if ($labels_cache = cache_get($cache_key)) {
      $labels = $labels_cache->data;
    }
    if (empty($labels)) {
      $labels = array();

      // Get local labels.
      foreach ($types as $entity_type => $bundles) {
        // @todo Warning, this might happen with $results base for remote entities also.
        $labels += sharedcontent_get_local_entity_bundle_labels($entity_type, $bundles);
      }

      // Get remote labels for display.
      if (function_exists('sharedcontent_client_get_remote_entity_bundle_labels')) {
        $labels += sharedcontent_client_get_remote_entity_bundle_labels($types);
      }

      // @todo merge $labels based on entity_type / entity_bundle and $labels value.

      cache_set($cache_key, $labels);
    }
  }

  if (empty($labels)) {
    sharedcontent_event_save('sharedcontent', __FUNCTION__, 'Failed to load bundle labels.', array(
      'labels' => $labels,
      'cache_key' => $cache_key,
      'types' => $types,
      'results' => $results,
    ), array('severity' => WATCHDOG_WARNING));
  }

  return $labels;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @todo doc
 */
function sharedcontent_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $form['sharedcontent'] = array(
    '#type' => 'fieldset',
    '#title' => t('Shared Content'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
  );

  $indexed_entities = variable_get('sharedcontent_indexed_entities', array());
  $type = 'node';
  $bundle = $form['#node_type']->type;

  $form['sharedcontent']['sharedcontent_is_indexed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Index this entity'),
    '#description' => t('By checking this option, this content type will be indexed within the Shared Content index. Doing so allows you to expose this content type to other sites.'),
    '#default_value' => !empty($indexed_entities[$type][$bundle]),
  );

  $form['#submit'][] = 'sharedcontent_form_node_type_form_submit';
}

/**
 * FAPI Submit handler.
 *
 * Persist indexed entities.
 */
function sharedcontent_form_node_type_form_submit($form, &$form_state) {
  $indexed_entities = variable_get('sharedcontent_indexed_entities', array());
  $type = 'node';
  $bundle = $form['#node_type']->type;
  $indexed_entities[$type][$bundle] = $form_state['values']['sharedcontent_is_indexed'];
  $indexed_entities[$type] = array_filter($indexed_entities[$type]);
  variable_set('sharedcontent_indexed_entities', $indexed_entities);
}

/**
 * Check for existing index record.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity the index is checked for.
 *
 * @return bool
 *   TRUE if there is an existing index record, FALSE otherwise.
 */
function sharedcontent_index_exists(EntityInterface $entity) {
  $query = \Drupal::entityQuery('sharedcontent_index');
  $query->andConditionGroup()
    ->condition('entity_uuid', $entity->uuid())
    ->condition('entity_type', $entity->entityType())
    ->condition('origin', IndexInterface::BUNDLE_LOCAL);

  $result = $query->execute();
  $exists = !empty($result);
  return $exists;
}

/**
 * Get entity language.
 *
 * Try to extract the entities language.
 * With Drupal >=7.15 this wrapper is unneeded.
 *
 * @param $entity
 *   The entity.
 * @param $type
 *   The type of the entity
 * @return
 *   The entities language.
 */
function sharedcontent_entity_language($entity, $type) {
  if (function_exists('entity_language')) {
    $language = entity_language($type, $entity);
  }
  else {
    if (isset($entity->language)) {
      $language = $entity->language;
    }
  }
  if (empty($language)) {
    $language = LANGUAGE_NONE;
  }
  return $language;
}

/**
 * Implements hook_entity_insert()
 *
 * @see sharedcontent_entity_update().
 */
function sharedcontent_entity_insert(EntityInterface $entity) {
  sharedcontent_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Check if the given entity should be index and trigger an index
 * update.
 */
function sharedcontent_entity_update(EntityInterface $entity) {
  if (Index::isIndexable($entity)) {
    // Add nodes to be indexed to a queue if setting is active.
    if (\Drupal::config('sharedcontent.indexing')->get('queued')) {
      $item = array(
        'entity_id' => $entity->id(),
        'type' => $entity->entityType(),
      );
      $queue = DrupalQueue::get('sharedcontent_indexing');
      $queue->createItem($item);
    }
    else {
      Index::indexEntity($entity);
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Set sharedcontent_index to
 * \Drupal\sharedcontent\IndexInterface::STATUS_NOT_REACHABLE if a record
 * exists.
 */
function sharedcontent_entity_delete($entity, $type) {
  Index::indexDeletedEntity($entity);
}

/**
 * Wrapper for past_event_save to avoid dependency to past.
 */
function sharedcontent_event_save($module, $machine_name, $message, array $arguments = array(), array $options = array()) {
  if (module_exists('past')) {
    past_event_save($module, $machine_name, $message, $arguments, $options);
  }
  else {
    $severity = isset($options['severity']) ? $options['severity'] : WATCHDOG_NOTICE;

    // Ignore debug messages unless explicitly enabled.
    if ($severity == WATCHDOG_DEBUG && variable_get('sharedcontent_event_ignore_debug', TRUE)) {
      return;
    }

    // Decode exceptions, as trying to print_r() them results in recursions.
    foreach ($arguments as &$argument) {
      if ($argument instanceof Exception) {
        $decoded = _drupal_decode_exception($argument);
        $argument = $decoded;
      }
    }

    watchdog((string) $module, '@name::@message <pre>@arguments</pre>', array(
      '@name' => $machine_name,
      '@message' => $message,
      '@arguments' => print_r($arguments, TRUE),
    ), $severity);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function sharedcontent_cron_queue_info() {
  $queues['sharedcontent_indexing'] = array(
    'worker callback' => 'sharedcontent_index_queued_entities',
    'time' => 30,
  );
  return $queues;
}

/**
 * Callback which dequeues nodes indexes queued nodes.
 *
 * @todo Rename: not only nodes anymore!
 */
function sharedcontent_index_queued_entities($data) {
  $entity = entity_load_single($data['type'], $data['entity_id']);
  if ($entity) {
    try {
      Index::indexEntity($entity);
    }
    catch (IndexingException $e) {
      if ($e->getCode() == SHAREDCONTENT_ERROR_NO_PARENT_INDEX
        && (empty($data['count']) || $data['count'] < 1)
      ) {
        // We do not have control about the order the items get indexed.
        // If we do come here the first time we do a reschedule the first
        // time expecting the parent index record to be generated later
        // during this cron run.
        $data['count'] = 1;
        DrupalQueue::get('sharedcontent_indexing')->createItem($data);
      }
      else {
        sharedcontent_event_save('sharedcontent', __FUNCTION__, $e->getMessage(), $e->data, array('severity' => WATCHDOG_ERROR));
      }
    }
  }
  else {
    sharedcontent_event_save('sharedcontent', __FUNCTION__, 'Failed to load entity', $data, array('severity' => WATCHDOG_WARNING));
  }
}

/**
 * Implements hook_init()
 *
 * Set Origin and Access-Control-Allow-Origin in order to make remote js
 * work for Shared Content.
 */
function sharedcontent_init() {
  global $base_url;
  // @todo: Only add when required? Possibly security issues by allowing
  //   everything?
  drupal_add_http_header('Origin', $base_url);
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
}

/**
 * Get flag status
 *
 * Check if the the entity is flagged,
 *
 * @return
 *   TRUE if at leas on flag is set for the entity, FALSE otherwise.
 */
function sharedcontent_flag_value_get(Index $data, array $options, $name, $type, $info) {
  $flag = flag_get_content_flags($type, $data->id(), $name);
  return !empty($flag);
}

/**
 * Implements hook_flag()
 *
 * Mark a sharedcontent_index entity as dirty so it will get reindexed
 * by search api on flagging and unflagging.
 */
function sharedcontent_flag($op, $flag, $content_id, $account, $fcid) {
  if ($flag->content_type == 'sharedcontent_index') {
    search_api_track_item_change($flag->content_type, array($content_id));
  }
}
